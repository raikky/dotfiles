" Guard against loading this twice. This does mean you cannot do:
" source $MYVIMRC
" to pick up changes, but that isn't usually what you want anyway (it does not
" clear existing settings that are no longer being set).
if ( exists('g:loaded_vimrc') && g:loaded_vimrc )
    finish
endif
let g:loaded_vimrc = 1


function s:Main()
    call s:LoadPlugins()
    call s:LoadKeymaps()
    call s:LoadTags()
    call s:LoadPath()

    autocmd! VimEnter * :call <SID>LoadCustomSettings()
endfunction

" This allows you to issue a command that uses the names of all of the buffer
" files. For example:
" :exe '! git add ' . join(BuffersList(), ' ')
" Would add the file corresponding to every open buffer to git.
" See http://stackoverflow.com/a/271709/170865
function! BuffersList()
    let all = range(0, bufnr('$'))
    let result = []

    for b in all
        if buflisted(b)
            call add(result, bufname(b))
        endif
    endfor

    return result
endfunction


function s:LoadPlugins()
    if s:CannotLoadPlugins()
        return 0
    endif

    call s:PrepareForPluginLoad()

    if s:CanInstallPluginLoader() && s:PluginLoaderMissing()
        call s:InstallPluginLoader()
    endif

    call plug#begin('~/.vim/plugged')

    call s:RegisterPlugins()

    if s:PluginsMissing()
        PlugInstall
    endif

    call plug#helptags()
    call plug#end()

    call s:ConfigurePlugins()

    return 1
endfunction

function s:CannotLoadPlugins()
    return version <= 701
endfunction

function s:CanInstallPluginLoader()
    " Can only install the plugin loader when vim is starting
    return has('vim_starting')
endfunction

function s:PluginLoaderMissing()
    return !filereadable(expand('~/.vim/autoload/plug.vim'))
endfunction

function s:CanUsePython()
    return has('python') || has('python3')
endfunction

function s:VersionSufficientToUseYouCompleteMe()
    return ( v:version > 704 || ( v:version > 703 && has('patch584') ) )
endfunction

function s:PluginsMissing()
    " The g:plugs map maps the plugin name to the settings for it.
    " The most relevant setting for this is the 'dir' setting which is the
    " destination folder.
    " Example (truncated) output of ':echo g:plugs':
    " {'vim-surround': {'uri': 'https://github.com/tpope/vim-surround.git', 'dir': '/home/matthew/.vim/plugged/vim-surround/', 'frozen': 0, 'branch': 'master'},...

    for spec in values(g:plugs)
        if !isdirectory(spec.dir)
            return 1
        endif
    endfor

    return 0
endfunction

function s:PrepareForPluginLoad()
    " Fuck YouCompleteMe. Bastard!
    let g:ycm_key_list_select_completion = []
    let g:ycm_key_list_previous_completion = []

    let g:NumberToggleTrigger="<leader>n"

    let g:syntastic_always_populate_loc_list = 1
endfunction

function s:InstallPluginLoader()
    echo "Installing Vim Plug.."
    echo ""
    silent !mkdir --parents ~/.vim/autoload
    silent !curl --fail --location --output ~/.vim/autoload/plug.vim https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
endfunction

function s:RegisterPlugins()
    " Each of these is registered in the g:plugs map.
    Plug 'https://github.com/altercation/vim-colors-solarized.git'
    Plug 'https://github.com/flazz/vim-colorschemes.git'

    Plug 'https://github.com/tpope/vim-classpath.git'
    Plug 'https://github.com/tpope/vim-dispatch.git'
    Plug 'https://github.com/tpope/vim-fireplace.git'
    Plug 'https://github.com/tpope/vim-leiningen.git'
    Plug 'https://github.com/kien/rainbow_parentheses.vim.git'

    Plug 'https://github.com/dart-lang/dart-vim-plugin.git'
    Plug 'https://github.com/ekalinin/Dockerfile.vim.git'
    Plug 'https://github.com/fatih/vim-go.git'
    Plug 'https://github.com/groenewege/vim-less.git'
    Plug 'https://github.com/hail2u/vim-css3-syntax.git'
    Plug 'https://github.com/jrozner/vim-antlr.git'
    Plug 'https://github.com/lervag/vimtex.git'
    Plug 'https://github.com/vim-perl/vim-perl'
    Plug 'https://github.com/vim-scripts/bnf.vim.git'
    Plug 'https://github.com/vim-scripts/nginx.vim.git'

    Plug 'https://github.com/bronson/vim-visual-star-search'
    Plug 'https://github.com/godlygeek/tabular.git'
    Plug 'https://github.com/jeffkreeftmeijer/vim-numbertoggle'
    Plug 'https://github.com/junegunn/tmux-complete.vim.git'
    Plug 'https://github.com/junegunn/fzf.git', { 'dir': '~/.fzf', 'do': 'yes \| ./install' }
    Plug 'https://github.com/kien/ctrlp.vim'
    Plug 'https://github.com/majutsushi/tagbar.git'
    Plug 'https://github.com/mileszs/ack.vim.git'
    Plug 'https://github.com/scrooloose/nerdtree.git'
    Plug 'https://github.com/scrooloose/syntastic.git'
    Plug 'https://github.com/tpope/vim-commentary.git'
    Plug 'https://github.com/tpope/vim-fugitive.git'
    Plug 'https://github.com/tpope/vim-repeat'
    Plug 'https://github.com/tpope/vim-sensible.git'
    Plug 'https://github.com/tpope/vim-surround.git'
    Plug 'https://github.com/tpope/vim-unimpaired.git'
    Plug 'https://github.com/vim-scripts/AnsiEsc.vim.git'
    Plug 'https://github.com/vim-scripts/kwbdi.vim.git'
    Plug 'https://github.com/matthewfranglen/vim-repl.git'
    Plug 'https://github.com/matthewfranglen/vim-shell.git'
    Plug 'https://github.com/matthewfranglen/vim-scheme.git'
    Plug 'https://github.com/matthewfranglen/vim-static-import.git'
    Plug 'https://github.com/matthewfranglen/vim-mf-defaults.git'

    Plug 'https://github.com/Valloric/YouCompleteMe.git', { 'do': './install.sh' }
    Plug 'https://github.com/SirVer/ultisnips.git'
    Plug 'https://github.com/honza/vim-snippets.git'
endfunction

function s:ConfigurePlugins()
    call s:ConfigureColors()
    call s:ConfigureEasytags()
    call s:ConfigureEclim()
    call s:ConfigureJavaOmniComplete()
    call s:ConfigureMarkdown()
    call s:ConfigureNERDTree()
    call s:ConfigureRainbowParenthesis()
    call s:ConfigureSyntastic()
    call s:ConfigureUltiSnips()

    if s:CanUsePython()
        call s:ConfigurePowerline()
    endif
endfunction

function s:ConfigureColors()
    " Convince Vim it can use 256 colors inside Gnome Terminal.
    " Needs CSApprox plugin
    set t_Co=256
    set background=dark

    let g:solarized_termcolors = 256
    colorscheme solarized
endfunction

function s:ConfigureEasytags()
    " Update local tags files in preference to the global one
    let g:easytags_dynamic_files = 1
    let g:easytags_async = 1
endfunction

function s:ConfigureEclim()
    autocmd FileType java call s:ConfigureEclimJavaBindings()
endfunction

function s:ConfigureEclimJavaBindings()
    nnoremap <silent> <buffer> <leader>i :JavaImport<CR>
    nnoremap <silent> <buffer> <leader>oi :JavaImportOrganize<CR>
    nnoremap <silent> <buffer> <leader>d :JavaDocSearch -x declarations<CR>
    nnoremap <silent> <buffer> <cr> :JavaSearchContext<CR>
endfunction

function s:ConfigureJavaOmniComplete()
    autocmd FileType java let g:EclimCompletionMethod = 'omnifunc'
    autocmd FileType java if &completefunc != '' | let &omnifunc=&completefunc | endif
    autocmd FileType java nnoremap <silent> <buffer> <CR> :JavaSearchContext<CR>
endfunction

function s:ConfigureMarkdown()
    " Set markdown filetype and spelling
    " Required otherwise .md is modulo-2 filetype
    autocmd BufNewFile,BufReadPost *.md set filetype=markdown
    autocmd BufRead,BufNewFile *.md setlocal spell
endfunction

function s:ConfigureNERDTree()
    " http://stackoverflow.com/questions/5601749/how-to-filter-out-files-by-extension-in-nerdtree
    let g:NERDTreeIgnore = ['\.pyc$']
endfunction

function s:ConfigureRainbowParenthesis()
    " Load rainbow parens for clojure files
    autocmd FileType clojure RainbowParenthesesToggle
    autocmd Syntax clojure RainbowParenthesesLoadRound
    autocmd Syntax clojure RainbowParenthesesLoadSquare
    autocmd Syntax clojure RainbowParenthesesLoadBraces
endfunction

function s:ConfigureSyntastic()
    let g:syntastic_python_checkers = ['python', 'pyflakes', 'pep8', 'pylint']
endfunction

function s:ConfigureUltiSnips()
    let g:UltiSnipsExpandTrigger="<C-E>"
    let g:UltiSnipsJumpForwardTrigger="<C-N>"
    let g:UltiSnipsJumpBackwardTrigger="<C-P>"
endfunction

function s:ConfigurePowerline()
    set rtp+=~/.local/lib/python2.7/site-packages/powerline/bindings/vim
endfunction

function s:LoadKeymaps()
    autocmd FileType perl :call <SID>LoadPerlKeymaps()

    " Map leader to space.
    let g:mapleader = "\<Space>"

    " This needs to be global as using let inside a function will implicitly
    " change it to be local to the function.  Within a function these two
    " statements are equivalent:
    "
    " let a = "b"
    " let l:a = "b"
    "
    " Outside a function these two statements are equivalent:
    "
    " let a = "b"
    " let g:a = "b"

    " Fugitive bindings
    nnoremap <unique> <leader>gs :Gstatus<CR>
    nnoremap <unique> <leader>gc :Gcommit<CR>
    noremap <unique> <script> <leader>gd :call <SID>ShowGitDiff()<CR>

    " Toggle Tags with <F8>, Nerdtree with <F7>
    nmap <F7> :NERDTreeToggle<CR><C-W>l
    nmap <F8> :TagbarToggle<CR>

    " Add static import with <leader>I
    " based on adding a regular import with <leader>i
    nnoremap <unique> <leader>I :AddStaticImport<CR>
endfunction

function s:LoadPerlKeymaps()
    nmap <leader>f :% ! perltidy<CR>
    iabbrev _dump Data::Dumper->new( [ ] )->Dump;
endfunction

function s:ShowGitDiff()
    execute g:ExecuteInShell('git diff')
    set syntax=diff
endfunction

function s:LoadCustomSettings()
    if filereadable("./vimrc")
        source ./vimrc
    endif
endfunction

function s:LoadTags()
    set tags=$HOME/.vimtags_jdk,./tags
endfunction

function s:LoadPath()
    autocmd FileType java setlocal path=,,.,**/src/**/java
endfunction

set number

call s:Main()
